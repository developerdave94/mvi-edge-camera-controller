#!/usr/bin/env python3

import sys,os
import requests
from picamera import PiCamera
from time import sleep
import urllib3
from dotenv import load_dotenv
import argparse
import paho.mqtt.client as mqtt

load_dotenv()

cli = argparse.ArgumentParser( description='IBM MVI Edge Camera Controller' )

cli.add_argument('--host', help = 'Hostname', default = os.getenv('MVIE_HOST') )
cli.add_argument('--user', help = 'User Name', default = os.getenv('MVIE_USER') )
cli.add_argument('--password', help = 'Password', default = os.getenv('MVIE_PASSWORD') )
cli.add_argument('--cert', help = 'CA Cert File', default = os.getenv('MVIE_CERT') )
cli.add_argument('--device', help = 'Input Device Name', default = os.getenv('MVIE_DEVICE') )

cli.add_argument('--width', help = 'Capture Width', type=int, default=os.getenv('PI_CAM_IMAGE_WIDTH') )
cli.add_argument('--height', help = 'Capture Height', type=int, default = os.getenv('PI_CAM_IMAGE_HEIGHT') )

cli.add_argument('-v', '--verbose', help = 'Verbose', action = 'store_true', default = False )
cli.add_argument('--preview', help = 'Verbose', action = 'store_true', default = False )

args = cli.parse_args()

print(args)

# disable an annoying warning
urllib3.disable_warnings(urllib3.exceptions.SubjectAltNameWarning)

def debug(msg='', end=None, flush=False):
    if (args.verbose):
        print(msg, end=end, flush=flush)
    
####### Step 1: Get a session token from MVI Edge

SESSION_URL = f"https://{args.host}/api/v1/users/sessions"

def fetchToken():

    debug('fetching access token')

    response = requests.post(
        SESSION_URL,
        json = {
            "grant_type": "password",
            "password": args.password,
            "username": args.user
        },
        verify = args.cert
    )

    if (response.status_code != 200):
        print(f"HTTP({respnose.status_code}) Unable to log into {args.host}")
        exit(1)

    body = response.json()

    return body['token']

token = fetchToken()

###### Step 2: Get the UUID for the requested device

def fetchDeviceID(deviceName):

    debug(f"fetching device id for {deviceName}")

    response = requests.get(
        f"https://{args.host}/api/v1/devices",
        headers = { "mvie-controller": token },
        verify = args.cert
    )

    devices = response.json()

    for device in devices:
        if device['name'] == deviceName:
            return device['uuid']
    
    print(f"Device '{deviceName}' not found")
    quit();

###### Step 3: Get Ready To Start Capturing Images

debug(f"starting camera({args.width}x{args.height})")

camera = PiCamera(
    resolution = ( args.width, args.height )
)

camera.start_preview()

CAPTURE_PATH  = "/tmp/mvi-edge-caputure.jpg"
IMAGE_UPLOAD_URL = f"https://{args.host}/api/v1/devices/images?uuid={fetchDeviceID(args.device)}"

def uploadCameraImage():
    camera.capture(CAPTURE_PATH)
    response = requests.post(
        IMAGE_UPLOAD_URL,
        files = { 'file': ('singleshot.jpg', open(CAPTURE_PATH,'rb') )},
        headers = { "mvie-controller": token },
        verify = args.cert
    )

    if (response.status_code != 200):
        print(f"HTTP({respnose.status_code}) Unable to upload image to {args.host}")
        exit(1)

    return True

debug("waiting for camera to initialize")

sleep(2) # wait for the camera to warm up

###### Step 4: Capture and upload images as needed...

if (args.preview):

    debug("sending images")
    count = 0
    while (True):
        uploadCameraImage()
        debug(".", end = '', flush = True)
        count = count + 1
        if (count % 25 == 0):
            debug("", flush = True)
            sleep(.25)

else:

    debug()
    
    count = 0
    while (True):

        id = input(f"({count}) Image ID: ")
        uploadCameraImage()
        count = count + 1
