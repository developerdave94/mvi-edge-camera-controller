#!/usr/bin/env python3

import sys, os, time
import requests
from picamera import PiCamera
import urllib3
from dotenv import load_dotenv
import argparse
import paho.mqtt.client as MQTT_Client

load_dotenv()

cli = argparse.ArgumentParser( description='IBM MVI Edge Camera Controller' )

cli.add_argument('-v', '--verbose', help = 'Display Debug Messages', action = 'store_true', default = False )

cli.add_argument('--host', help = 'Hostname', default = os.getenv('MVIE_HOST') )
cli.add_argument('--user', help = 'User Name', default = os.getenv('MVIE_USER') )
cli.add_argument('--password', help = 'Password', default = os.getenv('MVIE_PASSWORD') )
cli.add_argument('--cert', help = 'CA Cert File', default = os.getenv('MVIE_CERT') )
cli.add_argument('--device', help = 'Input Device Name', default = os.getenv('MVIE_DEVICE') )
cli.add_argument('--token-life', help = 'Maximum Token Life (mins)', type=float, default = 9.5 )

cli.add_argument('--mqtt-port', help = 'MQTT Port', type=int, default = os.getenv('MQTT_PORT') )
cli.add_argument('--mqtt-trigger', help = 'MQTT Trigger', default = os.getenv('MQTT_TRIGGER') )

cli.add_argument('--width', help = 'Capture Width', type=int, default=os.getenv('PI_CAM_IMAGE_WIDTH') )
cli.add_argument('--height', help = 'Capture Height', type=int, default = os.getenv('PI_CAM_IMAGE_HEIGHT') )

cli.add_argument('--preview', help = 'Preview Mode', action = 'store_true', default = False )
cli.add_argument('--preview-delay', help = 'Preview Image Delay (secs)', type=float, default = 1.0 )

def debug(msg='', end=None, flush=False):
    if (args.verbose):
        print(msg, end=end, flush=flush)
    
args = cli.parse_args()

for key in sorted(args.__dict__):
    if key != 'password':
        debug(f"{key} = {args.__dict__[key]}")

# disable an annoying warning
urllib3.disable_warnings(urllib3.exceptions.SubjectAltNameWarning)

####### Step 1: Get a session token from MVI Edge

SESSION_URL = f"https://{args.host}/api/v1/users/sessions"

TOKEN_LIFE = args.token_life * 60 # token refresh after `args.token_life` minutes (default is 9.5)

__lastToken__ = None
__tokenTime__ = 0

#
# token() - fetch an MVI access token (when needed)
#
def token():

    global __lastToken__, __tokenTime__

    # do we need a fresh token?
    if ( time.time() - __tokenTime__ > TOKEN_LIFE ):

        debug('fetching access token')

        response = requests.post(
            SESSION_URL,
            json = {
                "grant_type": "password",
                "password": args.password,
                "username": args.user
            },
            verify = args.cert
        )

        if (response.status_code != 200):
            print(f"HTTP({respnose.status_code}) Unable to log into {args.host}")
            exit(1)

        body = response.json()

        __lastToken__ = body['token']
        __tokenTime__ = time.time()

    return __lastToken__

###### Step 2: Get the UUID for the requested device

def fetchDeviceID(deviceName):

    debug(f"fetching device id for {deviceName}")

    response = requests.get(
        f"https://{args.host}/api/v1/devices",
        headers = { "mvie-controller": token() },
        verify = args.cert
    )

    devices = response.json()

    for device in devices:
        if device['name'] == deviceName:
            return device['uuid']
    
    print(f"Device '{deviceName}' not found")
    quit();

IMAGE_UPLOAD_URL = f"https://{args.host}/api/v1/devices/images?uuid={fetchDeviceID(args.device)}"

###### Step 3: Connect to MQTT Broker

def on_connect(client, userdata, flags, rc):
    debug("MQTT Connected: " + str(rc))
    
mqtt = MQTT_Client.Client()

mqtt.on_connect = on_connect
mqtt.tls_set(args.cert)
mqtt.tls_insecure_set(True)
mqtt.connect(args.host, args.mqtt_port, 60)

mqtt.loop_start()

###### Step 4: Get Ready To Start Capturing Images

debug(f"starting camera({args.width}x{args.height})")

camera = PiCamera(
    resolution = ( args.width, args.height )
)

camera.start_preview()

CAPTURE_PATH  = "/tmp/mvi-edge-caputure.jpg"

def uploadCameraImage():
    camera.capture(CAPTURE_PATH)
    response = requests.post(
        IMAGE_UPLOAD_URL,
        files = { 'file': ('singleshot.jpg', open(CAPTURE_PATH,'rb') )},
        headers = { "mvie-controller": token() },
        verify = args.cert
    )

    if (response.status_code != 200):
        print(f"HTTP({respnose.status_code}) Unable to upload image to {args.host}")
        exit(1)

    return True

debug("waiting for camera to initialize")

time.sleep(2) # wait for the camera to warm up

###### Step 5: Capture and upload images as needed...

if (args.preview):

    debug("sending images")
    count = 0
    while (True):
        uploadCameraImage()
        debug(".", end = '', flush = True)
        count = count + 1
        if (count % 80 == 0):
            debug("", flush = True)
        time.sleep(args.preview_delay)

else:

    count = 0
    while (True):

        id = input(f"({count}) Serial # / ID: ")

        if not len(id):
            id = str(time.time())

        uploadCameraImage()

        payload = '{' f'"sn":"{id}", "seq": {count}' '}'

        debug(f"{args.mqtt_trigger} {payload}")
        
        # trigger the inspection
        mqtt.publish(args.mqtt_trigger, payload)

        count = count + 1
        
